/**
 * Tests c in an Interval of p until m loops or c is true
 *  if c is true - fn is called
 * Â© Stefan Friedl
 *  
 * @param {Function}    fn callback function
 * @param {String}      c  condition to check
 * @param {int}         m  max loops to check c
 * @param {int}         p  interval pause
 */

var DoWhen   = function(fn, c, m, p) {
    "use strict";

    if( !fn ){ log('no callback Function given'); return 0; }
    if( !c  ){ log('no condition given'); return 0; }

    var t   = this;
    t.fn        = t.fn  || fn   || function(){};
    t.m         = t.m   || m    || 5;
    t.p         = t.p   || p    || 500;
    t.n         = 0;
    t.tFn       = t.tFn || new Function('return '+c);
    
    t.iFn   = function(){
        log('Inteval startet... counter at ', t.n);
        if( t.tFn() ){
            log('condition is true!');
            // do the magic
            t.fn();
        }else{
            t.n++;
            log('condition is false');
        }
        if( t.tFn() || t.n >= t.m ){
            window.clearInterval( t.i );
        }
    };
    
    t.i  = window.setInterval( function(){
        t.iFn();
    }, p);
};

var testestFn   = function() {
    log('testestFn called!!!');
};

new DoWhen(testestFn, '1 === 1');
// new DoWhen(testestFn, 'jQuery("script").length > 1', 3, 2000);





/**
 *  
 * @param {Function}    fn callback function
 * @param {String}      c  condition to check
 * @param {int}         m  max loops to check c
 * @param {int}         p  interval pause
 */

//var DoWhen=function(fn,c,m,p){var t=this;t.fn=t.fn||fn||jQuery.noop();t.m=t.m||m||5;t.p=t.p||p||500;t.n=0;t.tFn=t.tFn||new Function("return "+c);t.iFn=function(){log("Inteval startet... counter at ",t.n);if(t.tFn()){log("condition is true!");t.fn()}else{t.n++;log("condition is false")}if(t.tFn()||t.n>=t.m){window.clearInterval(t.i)}};t.i=window.setInterval(function(){t.iFn()},p)};
